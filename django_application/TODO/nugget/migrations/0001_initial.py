# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-12-03 02:27
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current', models.IntegerField(default='0', help_text='Specifies an active battle. 0=inactive, 1=active/pending response, 2=finished, 3=must respond', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'User Battle Set',
                'verbose_name_plural': 'User Battle Sets',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BattleInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this battle', primary_key=True, serialize=False, verbose_name='Battle ID')),
                ('net_coins', models.DecimalField(decimal_places=0, default=0, help_text='Coins won or lost', max_digits=10, verbose_name='Net Coins')),
                ('nug_xp', models.IntegerField(default='0', help_text='Nugget Experience', verbose_name='Net XP')),
                ('winner', models.IntegerField(default='0', help_text='1=opp_a, 2=opp_b, 3=tie', verbose_name='Winner')),
            ],
            options={
                'verbose_name': 'Battle',
                'verbose_name_plural': 'Battles',
                'ordering': ['id', 'net_coins', 'nug_xp', 'opp_a', 'opp_b'],
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Friends List',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.CharField(max_length=200, verbose_name='Message Field')),
            ],
            options={
                'verbose_name': 'User Inventory',
                'verbose_name_plural': 'User Inventory',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nugget.Inventory')),
            ],
            options={
                'verbose_name': 'Inventory Through Data',
                'verbose_name_plural': 'Inventory Through Data',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this item', primary_key=True, serialize=False, verbose_name='Item ID')),
                ('name', models.CharField(help_text='Name of item', max_length=25, verbose_name='Item Name')),
                ('price', models.IntegerField(default=50, help_text='Item Price', verbose_name='Price')),
                ('effect', models.IntegerField(default=5, help_text='+/- Stat', verbose_name='+/- Stat')),
                ('item_status', models.CharField(blank=True, choices=[('food', 'Food'), ('accesory', 'Accesories'), ('toy', 'Toys')], default='c', help_text='Type of Item', max_length=100, verbose_name='Type')),
                ('item_features', models.CharField(blank=True, choices=[('he', 'Health'), ('hun', 'Hunger'), ('def', 'Defense'), ('f', 'Fatigue'), ('i', 'Intelligence'), ('happ', 'Happiness'), ('l', 'luck')], default='he', help_text='Type of Feature', max_length=100, verbose_name='Features')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'ordering': ['id', 'name', 'price', 'effect', 'item_status', 'item_features'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=250, verbose_name='News Item')),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Nugget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Nugget name', max_length=25, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Nugget',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NuggetAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('health', models.IntegerField(default=100, help_text='Nugget Health', verbose_name='Health')),
                ('color', models.CharField(default='goldenrod', help_text='Nugget Color', max_length=50, verbose_name='Color')),
                ('eye_size', models.IntegerField(default=10, help_text='Eye size', verbose_name='Eye Size')),
                ('experience', models.IntegerField(default=50, help_text='Experience Points', verbose_name='XP')),
                ('hunger', models.IntegerField(default=100, help_text='Nugget Hunger', verbose_name='Hunger')),
                ('happiness', models.IntegerField(default=100, help_text='Nugget Happiness', verbose_name='Happiness')),
                ('defense', models.IntegerField(default=100, help_text='Nugget Defense', verbose_name='Defense')),
                ('battle_XP', models.IntegerField(default=100, help_text='Battle Experience Points', verbose_name='Battle XP')),
                ('fatigue', models.IntegerField(default=100, help_text='Nugget Fatigue', verbose_name='Fatigue')),
                ('intelligence', models.IntegerField(default=20, help_text='Nugget Intelligence', verbose_name='Intelligence')),
                ('luck', models.IntegerField(default=20, help_text='Nugget Luck', verbose_name='Luck')),
                ('mouth_status', models.CharField(blank=True, choices=[('hyper', 'Hyper'), ('nervous', 'Nervous'), ('hungry', 'Hungry'), ('content', 'Content')], default='h', help_text='Type of Nugget Mouth', max_length=10)),
                ('nugget_status', models.CharField(blank=True, choices=[('e', 'Egg'), ('c', 'Circle')], default='e', help_text='Type of Nugget Shape', max_length=10)),
            ],
            options={
                'verbose_name': 'Nugget Attributes',
                'verbose_name_plural': 'Nugget Attributes',
                'ordering': ['nugget_status', 'experience'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False, verbose_name='ID')),
                ('bday', models.DateField(default=datetime.date.today, verbose_name='Birthday')),
                ('coins', models.IntegerField(default=500, help_text='User Currency', verbose_name='Coins')),
                ('usr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserProfile',
                'verbose_name_plural': 'UserProfiles',
                'ordering': ['id', 'usr', 'bday', 'coins'],
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.CharField(max_length=200, verbose_name='Message Field')),
                ('items', models.ManyToManyField(to='nugget.Item')),
            ],
        ),
        migrations.AddField(
            model_name='nugget',
            name='attributes',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nugget.NuggetAttribute', verbose_name='Attributes'),
        ),
        migrations.AddField(
            model_name='nugget',
            name='inventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nugget.Inventory', verbose_name='Inventory'),
        ),
        migrations.AddField(
            model_name='nugget',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='nugget.Profile'),
        ),
        migrations.AddField(
            model_name='inventoryitems',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nugget.Item'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='items',
            field=models.ManyToManyField(through='nugget.InventoryItems', to='nugget.Item'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='nugget.Profile'),
        ),
        migrations.AddField(
            model_name='friend',
            name='current_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='nugget.Profile', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='friend',
            name='users',
            field=models.ManyToManyField(to='nugget.Profile', verbose_name='Friends'),
        ),
        migrations.AddField(
            model_name='battleinstance',
            name='opp_a',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opponent_A', to='nugget.Profile', verbose_name='Opponent'),
        ),
        migrations.AddField(
            model_name='battleinstance',
            name='opp_b',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opponent_B', to='nugget.Profile', verbose_name='Opponent'),
        ),
        migrations.AddField(
            model_name='battle',
            name='activeBattle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nugget.BattleInstance'),
        ),
        migrations.AddField(
            model_name='battle',
            name='battles',
            field=models.ManyToManyField(blank=True, null=True, related_name='list_battles', to='nugget.BattleInstance'),
        ),
        migrations.AddField(
            model_name='battle',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='nugget.Profile', verbose_name='User ID'),
        ),
    ]
